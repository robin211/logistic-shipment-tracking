// Generated by view binder compiler. Do not edit!
package com.fli.elogistic.driver.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.fli.elogistic.driver.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPengirimanBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView bgToolbar;

  @NonNull
  public final TextView noData;

  @NonNull
  public final LinearLayout pengirimanLayout;

  @NonNull
  public final RecyclerView rvPengiriman;

  @NonNull
  public final TextView title;

  private FragmentPengirimanBinding(@NonNull LinearLayout rootView, @NonNull ImageView bgToolbar,
      @NonNull TextView noData, @NonNull LinearLayout pengirimanLayout,
      @NonNull RecyclerView rvPengiriman, @NonNull TextView title) {
    this.rootView = rootView;
    this.bgToolbar = bgToolbar;
    this.noData = noData;
    this.pengirimanLayout = pengirimanLayout;
    this.rvPengiriman = rvPengiriman;
    this.title = title;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPengirimanBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPengirimanBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_pengiriman, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPengirimanBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bg_toolbar;
      ImageView bgToolbar = rootView.findViewById(id);
      if (bgToolbar == null) {
        break missingId;
      }

      id = R.id.no_data;
      TextView noData = rootView.findViewById(id);
      if (noData == null) {
        break missingId;
      }

      LinearLayout pengirimanLayout = (LinearLayout) rootView;

      id = R.id.rv_pengiriman;
      RecyclerView rvPengiriman = rootView.findViewById(id);
      if (rvPengiriman == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = rootView.findViewById(id);
      if (title == null) {
        break missingId;
      }

      return new FragmentPengirimanBinding((LinearLayout) rootView, bgToolbar, noData,
          pengirimanLayout, rvPengiriman, title);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
